/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/compile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compile
         * @description Queue a compilation request.
         */
        post: operations["compile_compile_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Status
         * @description Fetch status of a compile request.
         */
        get: operations["status_status__uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/result/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Result
         * @description Fetch result of a compile request.
         *
         *     :raises HTTPException: (Status 404) If no compile request with uuid is found
         */
        get: operations["result_result__uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/compile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Debug Compile
         * @description Compiles the request to an openqasm3 program in one shot.
         */
        post: operations["debug_compile_debug_compile_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/debug/enrich": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Debug Enrich
         * @description Enriches all nodes in the compile request.
         */
        post: operations["debug_enrich_debug_enrich_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AncillaNode */
        AncillaNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ancilla";
            /**
             * Size
             * @default 1
             */
            size?: number;
        };
        /** BitLiteralNode */
        BitLiteralNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bit";
            /**
             * Value
             * @enum {integer}
             */
            value: 0 | 1;
        };
        /** BoolLiteralNode */
        BoolLiteralNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bool";
            /** Value */
            value: boolean;
        };
        /**
         * CompileRequest
         * @description Models a complete compile request.
         */
        CompileRequest: {
            metadata: components["schemas"]["MetaData"];
            /** Nodes */
            nodes: (components["schemas"]["ImplementationNode"] | components["schemas"]["QubitNode"] | components["schemas"]["EncodeValueNode"] | components["schemas"]["PrepareStateNode"] | components["schemas"]["SplitterNode"] | components["schemas"]["MergerNode"] | components["schemas"]["MeasurementNode"] | components["schemas"]["GateNode"] | components["schemas"]["ParameterizedGateNode"] | components["schemas"]["BitLiteralNode"] | components["schemas"]["BoolLiteralNode"] | components["schemas"]["IntLiteralNode"] | components["schemas"]["FloatLiteralNode"] | components["schemas"]["AncillaNode"] | components["schemas"]["IfThenElseNode"] | components["schemas"]["RepeatNode"] | components["schemas"]["OperatorNode"])[];
            /** Edges */
            edges: components["schemas"]["Edge"][];
        };
        /** Edge */
        Edge: {
            /** Source */
            source: [
                string,
                number
            ];
            /** Target */
            target: [
                string,
                number
            ];
            /** Size */
            size?: number | null;
            /** Identifier */
            identifier?: string | null;
        };
        /** EncodeValueNode */
        EncodeValueNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "encode";
            /**
             * Encoding
             * @enum {string}
             */
            encoding: "amplitude" | "angle" | "basis" | "custom" | "matrix" | "schmidt";
            /**
             * Bounds
             * @default 0
             */
            bounds?: number;
        };
        /** FloatLiteralNode */
        FloatLiteralNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "float";
            /**
             * Bitsize
             * @default 32
             */
            bitSize?: number;
            /** Value */
            value: number;
        };
        /** GateNode */
        GateNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "gate";
            /**
             * Gate
             * @enum {string}
             */
            gate: "cnot" | "toffoli" | "h" | "x" | "y" | "z";
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IfThenElseNode */
        IfThenElseNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "if-then-else";
            /** Condition */
            condition: string;
            thenBlock: components["schemas"]["NestedBlock"];
            elseBlock: components["schemas"]["NestedBlock"];
        };
        /**
         * ImplementationNode
         * @description Special node that holds just an implementation.
         *     This is used in case the user manually enters an implementation in the frontend.
         */
        ImplementationNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "implementation";
            /** Implementation */
            implementation: string;
        };
        /** IntLiteralNode */
        IntLiteralNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "int";
            /**
             * Bitsize
             * @default 32
             */
            bitSize?: number;
            /** Value */
            value: number;
        };
        /** MeasurementNode */
        MeasurementNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "measure";
            /** Indices */
            indices: number[];
        };
        /** MergerNode */
        MergerNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "merger";
            /** Numberinputs */
            numberInputs: number;
        };
        /**
         * MetaData
         * @description Models the metadata of a compile request.
         */
        MetaData: {
            /** Version */
            version: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Author */
            author: string;
            /** Optimizewidth */
            optimizeWidth?: number | null;
            /** Optimizedepth */
            optimizeDepth?: number | null;
        };
        /** NestedBlock */
        NestedBlock: {
            /** Nodes */
            nodes: (components["schemas"]["ImplementationNode"] | components["schemas"]["QubitNode"] | components["schemas"]["EncodeValueNode"] | components["schemas"]["PrepareStateNode"] | components["schemas"]["SplitterNode"] | components["schemas"]["MergerNode"] | components["schemas"]["MeasurementNode"] | components["schemas"]["GateNode"] | components["schemas"]["ParameterizedGateNode"] | components["schemas"]["BitLiteralNode"] | components["schemas"]["BoolLiteralNode"] | components["schemas"]["IntLiteralNode"] | components["schemas"]["FloatLiteralNode"] | components["schemas"]["AncillaNode"] | components["schemas"]["IfThenElseNode"] | components["schemas"]["RepeatNode"] | components["schemas"]["OperatorNode"])[];
            /** Edges */
            edges: components["schemas"]["Edge"][];
        };
        /** OperatorNode */
        OperatorNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "operator";
            /**
             * Operator
             * @enum {string}
             */
            operator: "+" | "-" | "*" | "/" | "**" | "|" | "&" | "~" | "^" | "<" | "<=" | ">" | ">=" | "==" | "!=" | "min" | "max";
        };
        /** ParameterizedGateNode */
        ParameterizedGateNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "gate-with-param";
            /**
             * Gate
             * @enum {string}
             */
            gate: "rx" | "ry" | "rz";
            /** Parameter */
            parameter: number;
        };
        /** PrepareStateNode */
        PrepareStateNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "prepare";
            /**
             * Quantumstate
             * @enum {string}
             */
            quantumState: "ϕ+" | "ϕ-" | "ψ+" | "ψ-" | "custom" | "ghz" | "uniform" | "w";
            /** Size */
            size: number;
        };
        /**
         * Progress
         * @description Models the progress of a compile request.
         */
        Progress: {
            /** Percentage */
            percentage: number;
            /** Currentstep */
            currentStep: string;
        };
        /** QubitNode */
        QubitNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "qubit";
            /**
             * Size
             * @default 1
             */
            size?: number;
        };
        /** RepeatNode */
        RepeatNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "repeat";
            /** Iterations */
            iterations: number;
            block: components["schemas"]["NestedBlock"];
        };
        /** SplitterNode */
        SplitterNode: {
            /** Id */
            id: string;
            /** Label */
            label?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "splitter";
            /** Numberoutputs */
            numberOutputs: number;
        };
        /**
         * StatusBody
         * @description Models the status of a process.
         */
        StatusBody: {
            /**
             * Uuid
             * Format: uuid
             */
            uuid: string;
            status: components["schemas"]["StatusType"];
            /** Createdat */
            createdAt: string | null;
            /** Completedat */
            completedAt: string | null;
            progress: components["schemas"]["Progress"] | null;
            /** Result */
            result: string | null;
        };
        /**
         * StatusType
         * @description Enumeration of possible status values.
         * @enum {string}
         */
        StatusType: "in progress" | "failed" | "completed" | "unknown";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    compile_compile_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    status_status__uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatusBody"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    result_result__uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    debug_compile_debug_compile_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    debug_enrich_debug_enrich_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImplementationNode"][] | string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
